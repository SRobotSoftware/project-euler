// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
// would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//	1: 1
//	3: 1,3
//	6: 1,2,3,6
//	10: 1,2,5,10
//	15: 1,3,5,15
//	21: 1,3,7,21
//	28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

// This method would probably work, but it takes far too long, needs to be refactored into an algorithm that uses prime factors to help pin down the number of factors

function calcDivisors(x) {
	let results = [];
	let limit = Math.sqrt(x);
	results.push(1,x);
	if (x % 2 === 0) results.push(2,x/2);
	for (let i = 3; i <= limit; i++) {
		let j = 1;
		while (i * j <= x) {
			if (i * j === x) results.push(i,j);
			j++;
		}
	}
	return results;
}

function calcTriangularNumbers(x) {
	console.log("Calculating...");
	let result = {
		num: 1,
		divisors: 1
	};
	let i = 2;
	while (result.divisors < x) {
		result.num += i;
		result.divisors = calcDivisors(result.num).length;
		i++;
	}
	console.log(result);
	return result;
}
// calcTriangularNumbers(500);