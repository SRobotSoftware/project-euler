// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
// would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//	1: 1
//	3: 1,3
//	6: 1,2,3,6
//	10: 1,2,5,10
//	15: 1,3,5,15
//	21: 1,3,7,21
//	28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

// This method would probably work, but it takes far too long, needs to be refactored into an algorithm that uses prime factors to help pin down the number of factors
// function calcDivisors(x) {
// 	var results = []
// 	var limit = sqrt(x)
// 	results.push(1, x)
// 	if (x % 2 === 0) results.push(2, x / 2)
// 	var i = 3
// 	while (i <= limit) {
// 		var j = 1
// 		while (i * j <= x) {
// 			if (i * j === x) results.push(i, j)
// 			j++
// 		}
// 		i++
// 	}
// 	return results
// }


// var sqrt = Math.sqrt
// function calcNumDivisors(x) {
// 	if (isPrime(x)) return 2
// 	var out = 2
// 	var limit = sqrt(x)
// 	if (x % 2 === 0) out += 2
// 	var i = 3
// 	while (i <= limit) {
// 		var j = 1
// 		while (i * j <= x) {
// 			if (i * j === x) out += 2
// 			j++
// 		}
// 		i++
// 	}
// 	return out
// }

// function isPrime(x) {
// 	if ((x != 2 && x != 3) && (x % 2 === 0 || x % 3 === 0)) return false
// 	var m = Math.sqrt(x)
// 	var i = 5
// 	while (i <= m) {
// 		if (x % i === 0 || x % (i + 2) === 0) return false
// 		i += 6
// 	}
// 	return true
// }

// Averages 1981.2886 ms

var pow = Math.pow

function calcPrimeFactors(x) {
	var out = 2
	var i = 2
	while (pow(i,2) < x) {
		if (x % i === 0) out += 2
		i++
	}
	if (pow(i,2) === x) out++
	return out
}

function calcTriangularNumbers() {
	var numOfDivisors = 500
	var result = {
		num: 1,
		divisors: 1
	}
	var i = 2
	while (result.divisors < numOfDivisors) {
		result.num += i
		result.divisors = calcPrimeFactors(result.num)
		i++
	}
	return result
}

console.log(calcTriangularNumbers())
let metric = require('./mymetric.js')
console.log(metric.benchmark(50, calcTriangularNumbers))