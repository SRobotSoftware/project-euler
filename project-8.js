// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
// 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

// Averages 0.7577 ms

var myNum = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

function test() { // averages 0.7577
	var test = []
	var out = 0
	var i = 0
	while (i < myNum.length) {
		test.push(myNum[i])
		if (test.length > 13) {
			test.shift()
		}
		var result = test[0]
		var x = 1
		while (x < test.length) {
			result *= test[x]
			x++
		}
		if (result > out) out = result
		i++
	}
	return out
}

function test2() { // averages 1.2936
	var test = myNum.split('')
	var out = 0
	var i = 12
	while (i < test.length) {
		var range = [test[i - 12], test[i - 11], test[i - 10], test[i - 9], test[i - 8], test[i - 7], test[i - 6], test[i - 5], test[i - 4], test[i - 3], test[i - 2], test[i - 1], test[i]]
		var temp = range.reduce((p, c) => { return p * c })
		if (temp > out) out = temp
		i++
	}
	return out

}

let metric = require('./mymetric.js')
console.log(metric.benchmark(50, test))
console.log(metric.benchmark(50, test2))